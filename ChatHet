import yaml
import re
import os
import subprocess

# Mapping of EFS server patterns to their respective groups
PATTERN_TO_GROUP = {
    r"laau42efs.*": "l_aja_ausyb01sr1",
    r"laauu1efs.*": "l_aja_ausy02sr1",
    r"lchhk01efs.*": "l_aja_cnhhk01",
    r"lchhk02efs.*": "l_aja_cnhhk02",
    r"lchhk07efs.*": "l_aja_inhche07sr1",
    r"linnh02efs.*": "l_aja_inmu02sr1",
    r"linnh08efs.*": "l_aja_inmu08sr1",
    r"ljnpa05efs.*": "l_aja_jnspa01",
    r"ljnpa01efs.*": "l_aja_jnpe01",
    r"ljptk01efs.*": "l_aja_jptk01",
    r"lkrhk09efs.*": "l_aja_kray01sr1",
    r"lkrhk02efs.*": "l_aja_krse01sr2",
    r"lsgsg01efs.*": "l_aja_ssgsg01",
    r"lsgsg02efs.*": "l_aja_ssgsg02",
    r"ltwtp04efs.*": "l_aja_ttwtp04",
    r"ltwtp01efs.*": "l_aja_ttwtp01sr1",
    r"lemea01efs.*": "l_emea_ukcm01",
    r"luksg01efs.*": "l_emea_ukvg01",
    r"lusaz07efs.*": "l_amrs_usaz07",
    r"lusaz06efs.*": "l_amrs_usaz06",
    r"luspa01efs.*": "l_amrs_uspa01",
    r"lustx02efs.*": "l_amrs_ustx02",
    r"lusva01efs.*": "l_amrs_usva01",
}

def get_efs_server_output():
    """Executes a shell command to retrieve and parse EFS server details."""
    cmd = "efs display efsserver | sed -e '1,/^ ==* /d' | awk '{{print $2 ", " $1 ", " $3}}'"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)
    
    servers = [line.strip().split(',') for line in result.stdout.strip().split("\n") if len(line.strip().split(',')) >= 3]
    return servers

def load_inventory(file_path):
    """Loads and parses the inventory YAML file."""
    with open(file_path, 'r') as file:
        return yaml.safe_load(file)

def determine_group_from_pattern(server_name):
    """Determines the appropriate group for a given server name based on regex patterns."""
    for pattern, group in PATTERN_TO_GROUP.items():
        if re.match(pattern, server_name):
            return group
    return "Unknown Group"

def normalize_cell(cell_name):
    """Normalizes cell names to standardize format and remove inconsistencies."""
    cell_name = cell_name.strip().replace(".m1.com", ".ml.com")
    return re.sub(r'\s+', '', cell_name)

def parse_efsservers():
    """Parses EFS server data from the command output."""
    servers = get_efs_server_output()
    return {parts[0]: set([parts[1]]) for parts in servers}

def parse_inventory(file_path):
    """Parses the inventory YAML file to extract cell details for servers."""
    inventory = load_inventory(file_path)
    inventory_data = {}
    all_groups = inventory.get('all', {}).get('children', {})
    processed_hosts = set()

    for group, group_data in all_groups.items():
        if "hosts" in group_data and isinstance(group_data["hosts"], dict):
            for server, server_info in group_data["hosts"].items():
                if isinstance(server_info, dict) and server not in processed_hosts:
                    inventory_data[server] = set(normalize_cell(c) for c in server_info.get("cells", []))
                    processed_hosts.add(server)
    
    return inventory_data

def compare_cells(efsservers_data, inventory_data):
    """Compares expected and actual cells and prints discrepancies."""
    missing_servers = list(set(efsservers_data.keys()) - set(inventory_data.keys()))
    extra_servers = list(set(inventory_data.keys()) - set(efsservers_data.keys()))
    
    if missing_servers:
        print("\nMissing servers in inventory:")
        print("==========================================================")
        print("\n".join(missing_servers))
    
    if extra_servers:
        print("\nServers found in inventory but missing in EFS database:")
        print("==========================================================")
        print("\n".join(extra_servers))
    
    for server, expected_cells in efsservers_data.items():
        group = determine_group_from_pattern(server)
        actual_cells = inventory_data.get(server, set())
        expected_cells = {normalize_cell(c) for c in expected_cells}
        
        if not actual_cells:
            print(f"\nMismatch for server: {server} in group {group}:")
            print(f" EFS Database: {expected_cells}")
            print(f" Inventory: (New Server)")
        elif expected_cells != actual_cells:
            print(f"\n{server} in group {group}:")
            print(f" EFS Database: {expected_cells}")
            print(f" Inventory: {actual_cells}")
            
            missing_cells = expected_cells - actual_cells
            extra_cells = actual_cells - expected_cells
            if missing_cells:
                print(f" Cells in EFS Database but missing in inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in inventory but not in EFS Database: {extra_cells}")

def validate_inventory_with_efs(inventory_file):
    """Validates the inventory against the EFS server data."""
    efsservers_data = parse_efsservers()
    inventory_data = parse_inventory(inventory_file)
    compare_cells(efsservers_data, inventory_data)

# Load inventory file path and execute validation
script_dir = os.path.dirname(os.path.abspath(__file__))
inventory_file = os.path.join(script_dir, '..', 'prod', 'inventory.prod.yaml')
validate_inventory_with_efs(inventory_file)
