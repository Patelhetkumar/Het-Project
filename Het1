def parse_inventory(file_path):
    """Parse inventory-prod.yaml to extract actual cells for servers, avoiding duplicates."""
    with open(file_path, "r") as file:
        inventory = yaml.safe_load(file)

    inventory_data = {}
    processed_hosts = set()

    all_groups = inventory.get('all', {}).get('children', {})

    for group, group_data in all_groups.items():
        if isinstance(group_data, dict) and "hosts" in group_data:
            for server, server_info in group_data["hosts"].items():
                if isinstance(server_info, dict):
                    # Normalize cell names before adding
                    cells = {normalize_cell(c) for c in server_info.get("cells", [])}

                    if server not in processed_hosts:
                        inventory_data[server] = cells
                        processed_hosts.add(server)

    return inventory_data


def compare_cells(efsservers_data, inventory_data):
    """Compare expected and actual cells and print discrepancies to console."""
    missing_servers = list(set(efsservers_data.keys()) - set(inventory_data.keys()))
    extra_servers = list(set(inventory_data.keys()) - set(efsservers_data.keys()))

    if missing_servers:
        print("\nMissing servers in inventory:")
        print("==============================================")
        for server in missing_servers:
            print(f" {server}")

    if extra_servers:
        print("\nServers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==============================================")
        for server in extra_servers:
            print(f" {server}")

    for server, expected_cells in efsservers_data.items():
        group = determine_group_from_pattern(server)  # Extract group name
        if not group:
            print(f"Server {server} does not match any known group.")
            continue

        # Normalize expected and actual cells before comparison
        actual_cells = {normalize_cell(c) for c in inventory_data.get(server, set())}
        expected_cells = {normalize_cell(c) for c in expected_cells}

        # ðŸ”¥ Fix for empty AX inventory ðŸ”¥
        if not actual_cells:
            print(f"\n{server} in group {group}:")
            print(f" Efs Database: {expected_cells}")
            print(" Ax inventory: âš  **Server NOT FOUND in inventory!** âš ")
            continue  # Skip further checks for this server

        print(f"\n{server} in group {group}:")
        print(f" Efs Database: {expected_cells}")
        print(f" Ax inventory: {actual_cells}")

        if expected_cells != actual_cells:
            missing_cells = expected_cells - actual_cells
            extra_cells = actual_cells - expected_cells

            if missing_cells:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

    # Servers group validation
    if mismatches_servergroup:
        print("\nServers group validation:")
        print("==============================================")
        print("\n".join(mismatches_servergroup))
    else:
        print("==============================================")
        print("All servers are in the correct groups.\n")

    # Control group validation
    if mismatches:
        print("\nControl Group Validation:")
        print("==============================================")
        print("\n".join(mismatches))
    else:
        print("==============================================")
        print("Controlgroup A and B are correctly balanced for high availability.\n")


def validate_inventory_with_efs(inventory_file, efs_file):
    """Wrapper function to parse files and compare inventory with EFS."""
    efsservers_data = parse_efsservers(efs_file)  # Fixed function name
    inventory_data = parse_inventory(inventory_file)
    compare_cells(efsservers_data, inventory_data)


# Call the function
validate_inventory_with_efs(inventory_file, efs_file)
