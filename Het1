def parse_efs_database(file_path):
    """Parse EFS database and extract server-cell mappings, ensuring normalization."""
    efs_data = {}

    with open(file_path, "r") as file:
        for line in file:
            parts = [p.strip() for p in line.strip().split(",")]  # Strip spaces
            if len(parts) < 2:
                continue  # Skip malformed lines

            server, cell = parts[0], normalize_cell(parts[1])  # Normalize cell name

            if server not in efs_data:
                efs_data[server] = set()
            efs_data[server].add(cell)

    return efs_data

#######

def parse_inventory(file_path):
    """Parse inventory-prod.yaml to extract actual cells for servers, avoiding duplicates."""
    with open(file_path, "r") as file:
        inventory = yaml.safe_load(file)

    inventory_data = {}
    processed_hosts = set()

    def extract_hosts(group_data):
        """Recursively extract hosts from inventory groups."""
        if "hosts" in group_data:
            for server, server_info in group_data["hosts"].items():
                if isinstance(server_info, dict):
                    cells = {normalize_cell(c) for c in server_info.get("cells", [])}

                    # Avoid duplicate host processing
                    if server not in processed_hosts:
                        inventory_data[server] = cells
                        processed_hosts.add(server)

        if "children" in group_data:
            for subgroup in group_data["children"].values():
                extract_hosts(subgroup)  # Recursively scan nested groups

    extract_hosts(inventory.get("all", {}).get("children", {}))

    return inventory_data

########

def compare_cells(efs_data, ax_inventory):
    """Compare EFS and AX inventory and detect mismatches."""
    mismatches = []
    missing_servers = list(set(efs_data.keys()) - set(ax_inventory.keys()))  # Servers in EFS but not in AX

    for server, expected_cells in efs_data.items():
        actual_cells = ax_inventory.get(server, set())

        # Normalize both sets before comparison
        expected_cells = {normalize_cell(c) for c in expected_cells}
        actual_cells = {normalize_cell(c) for c in actual_cells}

        missing_cells = expected_cells - actual_cells
        extra_cells = actual_cells - expected_cells

        if missing_cells or extra_cells:
            mismatches.append({
                "Server": server,
                "Missing Cells": ", ".join(missing_cells) if missing_cells else "None",
                "Extra Cells": ", ".join(extra_cells) if extra_cells else "None"
            })

    # Print servers in EFS but missing in the inventory
    if missing_servers:
        print("\nðŸ”´ Servers in EFS Database but **MISSING** in AX Inventory:")
        for server in missing_servers:
            print(f"   - {server}")

    return mismatches

########

def normalize_server(server_name):
    """Normalize server names to avoid case mismatches."""
    return server_name.strip().lower()

# Apply it in parse functions
server = normalize_server(parts[0])  # In parse_efs_database()
server = normalize_server(server)  # In parse_inventory()
