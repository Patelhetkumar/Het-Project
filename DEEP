"""
EFS Server Inventory Validation Script

Maintains original output format while improving code structure and readability.
"""

import re
import os
import yaml
import subprocess
from typing import Dict, List, Set, Tuple

# Pattern to group mapping
PATTERN_TO_GROUP = {
    r"laau42efs.*": "l_aja_ausyb01sr1",
    # ... (keep all your original pattern mappings here)
}

def get_efs_server_output() -> List[List[str]]:
    """Get EFS server information from command output."""
    cmd = "efs display efsserver | sed -e '1,/^ ==* /d' | awk '{print $2 \", \" $1 \", \" $3}'"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)
    
    servers = []
    for line in result.stdout.strip().split("\n"):
        parts = [part.strip() for part in line.split(',')]
        if len(parts) >= 3:
            servers.append(parts)
    return servers

def load_inventory(file_path: str) -> dict:
    """Load inventory YAML file."""
    with open(file_path, 'r') as f:
        return yaml.safe_load(f)

def validate_server_placements(efs_servers: List[List[str]], 
                             servertype_dev: Set[str],
                             servertype_prod: Set[str]) -> Set[str]:
    """Validate server type placements."""
    mismatches = set()
    for server_entry in efs_servers:
        if len(server_entry) < 3:
            continue
        server_name, _, host_type = server_entry
        if server_name in servertype_dev and host_type != 'dev':
            mismatches.add(f"Mismatch: {server_name} {host_type} in servertype_dev but should be in servertype_prod")
        elif server_name in servertype_prod and host_type != 'prod':
            mismatches.add(f"Mismatch: {server_name} {host_type} in servertype_prod but should be in servertype_dev")
    return mismatches

def check_control_group_balance(inventory: dict, efs_data: Dict[str, Tuple[str, str]]) -> Tuple[List[str], int, int]:
    """Check control group balancing and return mismatches with counts."""
    controlgroup_a = set(inventory['all']['children']['controlgroup_a']['hosts'])
    controlgroup_b = set(inventory['all']['children']['controlgroup_b']['hosts'])
    
    data_center_pairs = {}
    group_counts = {
        'controlgroup_a': {'dev': [], 'prod': []},
        'controlgroup_b': {'dev': [], 'prod': []}
    }
    assigned_servers = set()
    mismatches = []
    
    for server_name, (cell_name, host_type) in efs_data.items():
        # Determine control group
        if server_name in controlgroup_a:
            group = 'controlgroup_a'
        elif server_name in controlgroup_b:
            group = 'controlgroup_b'
        else:
            continue
        
        # Update tracking structures
        group_counts[group][host_type].append((server_name, cell_name))
        assigned_servers.add(server_name)
        
        # Update data center pairs
        if cell_name not in data_center_pairs:
            data_center_pairs[cell_name] = {
                'controlgroup_a': {'dev': [], 'prod': []},
                'controlgroup_b': {'dev': [], 'prod': []}
            }
        data_center_pairs[cell_name][group][host_type].append(server_name)

    # Check for mismatches in data centers
    for cell, groups in data_center_pairs.items():
        a_dev = groups['controlgroup_a']['dev']
        a_prod = groups['controlgroup_a']['prod']
        b_dev = groups['controlgroup_b']['dev']
        b_prod = groups['controlgroup_b']['prod']
        
        if len(a_dev) != len(a_prod) or len(b_dev) != len(b_prod):
            mismatches.append(f"\nMismatch in data center {cell}:")
            mismatches.append(f"controlgroup_a: {' '.join([f'{s} (dev)' for s in a_dev])} "
                             f"{' '.join([f'{s} (prod)' for s in a_prod])}")
            mismatches.append(f"controlgroup_b: {' '.join([f'{s} (dev)' for s in b_dev])} "
                             f"{' '.join([f'{s} (prod)' for s in b_prod])}")

    # Check total counts
    total_efs = len(efs_data)
    total_assigned = len(assigned_servers)
    if total_assigned != total_efs:
        mismatches.append(f"Total server count mismatch: expected {total_efs}, but assigned {total_assigned}")
        unassigned = [s for s in efs_data.keys() if s not in assigned_servers]
        mismatches.append(f"Unassigned servers: {' '.join(unassigned)}")
    
    return mismatches, total_efs, total_assigned

def determine_group_from_pattern(server_name: str) -> str:
    """Determine server group from name pattern."""
    for pattern, group in PATTERN_TO_GROUP.items():
        if re.match(pattern, server_name):
            return group
    return "Unknown Group"

def normalize_cell(cell_name: str) -> str:
    """Normalize cell name formatting."""
    cell_name = cell_name.strip()
    cell_name = re.sub(r'\s+', '', cell_name)
    return cell_name.replace(".m1.com", ".ml.com")

def compare_inventory_with_efs(efs_data: Dict[str, Set[str]], 
                             inventory_path: str,
                             group_mismatches: Set[str],
                             control_mismatches: List[str]):
    """Compare inventory with EFS data and print results in original format."""
    # Load inventory data
    with open(inventory_path, 'r') as f:
        inventory = yaml.safe_load(f)
    
    # Process inventory hosts
    inventory_hosts = {}
    processed = set()
    all_groups = inventory.get('all', {}).get('children', {})
    
    for group_data in all_groups.values():
        if 'hosts' in group_data and isinstance(group_data['hosts'], dict):
            for host, info in group_data['hosts'].items():
                if host in processed:
                    continue
                inventory_hosts[host] = set(normalize_cell(c) for c in info.get('cells', []))
                processed.add(host)

    # Find missing and extra servers
    missing = set(efs_data.keys()) - set(inventory_hosts.keys())
    extra = set(inventory_hosts.keys()) - set(efs_data.keys())

    # Print results in original format
    if missing:
        print("\nMissing servers in inventory:")
        print("==========================================================")
        for server in missing:
            print(f" {server}")
    
    if extra:
        print("\nservers found in ax_inventories but not in Efs Database or efsserver.txt:")
        print("==========================================================")
        for server in extra:
            print(f" {server}")

    # Check cell mismatches
    for server, expected_cells in efs_data.items():
        group = determine_group_from_pattern(server)
        actual_cells = inventory_hosts.get(server, set())
        norm_expected = {normalize_cell(c) for c in expected_cells}
        norm_actual = {normalize_cell(c) for c in actual_cells}

        if not actual_cells:
            print(f"\nMismatch for server: {server} in group {group}:")
            print(f" Efs Database: {norm_expected}")
            print(f" Ax inventory: (New Server)")
        elif norm_expected != norm_actual:
            print(f"\n{server} in group {group}:")
            print(f" Efs Database: {norm_expected}")
            print(f" Ax inventory: {norm_actual}")
            if missing_cells := norm_expected - norm_actual:
                print(f" Cells in the Efs Database but not in the Ax inventory: {missing_cells}")
            if extra_cells := norm_actual - norm_expected:
                print(f" Cells in the Ax inventory but not in the Efs Database: {extra_cells}")

    # Print validation sections
    print("\nServers group validation:")
    print("==========================================================")
    if group_mismatches:
        print("\n".join(group_mismatches))
    else:
        print("All servers are in the correct groups. \n")

    print("\nControl Group Validation:")
    print("==========================================================")
    if control_mismatches:
        print("\n".join(control_mismatches))
    else:
        print("Controlgroup A and B are correctly balanced for high availability. \n")

def main():
    """Main execution flow preserving original output structure."""
    # Load data sources
    inventory_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'prod', 'inventory.prod.yaml')
    inventory = load_inventory(inventory_path)
    raw_efs = get_efs_server_output()
    
    # Process EFS data
    efs_servers = {s[0]: (s[1], s[2]) for s in raw_efs if len(s) >= 3}
    efs_server_names = {s[0]: set([s[1]]) for s in raw_efs if len(s) >= 2}
    
    # Validate server placements
    servertype_dev = set(inventory['all']['children']['servertype_dev']['hosts'])
    servertype_prod = set(inventory['all']['children']['servertype_prod']['hosts'])
    group_mismatches = validate_server_placements(raw_efs, servertype_dev, servertype_prod)
    
    # Check control group balance
    control_mismatches, total_efs, total_assigned = check_control_group_balance(inventory, efs_servers)
    
    # Generate comparison report
    compare_inventory_with_efs(
        efs_data=efs_server_names,
        inventory_path=inventory_path,
        group_mismatches=group_mismatches,
        control_mismatches=control_mismatches
    )

if __name__ == "__main__":
    main()
