"""
EFS Server Inventory Validation Script

This script validates EFS server configurations against a YAML inventory file,
checking for correct group assignments, cell consistency, and high-availability balance.
"""

import re
import os
import yaml
import subprocess
from typing import Dict, List, Set, Tuple

# Constants
PATTERN_TO_GROUP = {
    r"laau42efs.*": "l_aja_ausyb01sr1",
    # ... (rest of your pattern mappings remain the same)
}

INVENTORY_PATH = os.path.join(
    os.path.dirname(os.path.abspath(__file__)), 
    '..', 'prod', 'inventory.prod.yaml'
)

# Type aliases for better readability
ServerCells = Dict[str, Set[str]]
InventoryData = Dict[str, Set[str]]
ControlGroups = Dict[str, Dict[str, List[Tuple[str, str]]]

def get_efs_servers() -> List[List[str]]:
    """Retrieve EFS server information from system command output.
    
    Returns:
        List of server entries with [server_name, cell_name, host_type]
    """
    cmd = "efs display efsserver | sed -e '1,/^ ==* /d' | awk '{print $2 \", \" $1 \", \" $3}'"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)
    
    return [
        [part.strip() for part in line.split(',')]
        for line in result.stdout.strip().split('\n')
        if len(line.split(',')) >= 3
    ]

def load_inventory(file_path: str) -> dict:
    """Load YAML inventory file.
    
    Args:
        file_path: Path to inventory YAML file
        
    Returns:
        Parsed inventory data
    """
    with open(file_path, 'r') as f:
        return yaml.safe_load(f)

def validate_server_groups(efs_servers: List[List[str]], 
                         servertype_dev: Set[str],
                         servertype_prod: Set[str]) -> Set[str]:
    """Validate server group assignments.
    
    Args:
        efs_servers: List of EFS server entries
        servertype_dev: Set of dev servers from inventory
        servertype_prod: Set of prod servers from inventory
    
    Returns:
        Set of mismatch messages
    """
    mismatches = set()
    
    for server_entry in efs_servers:
        server_name, _, host_type = server_entry[:3]
        
        if server_name in servertype_dev and host_type != 'dev':
            mismatches.add(f"Mismatch: {server_name} {host_type} in servertype_dev (should be prod)")
        elif server_name in servertype_prod and host_type != 'prod':
            mismatches.add(f"Mismatch: {server_name} {host_type} in servertype_prod (should be dev)")
    
    return mismatches

def analyze_control_groups(inventory: dict, efs_data: Dict[str, Tuple[str, str]]) -> Tuple[ControlGroups, Dict[str, dict]]:
    """Analyze server distribution across control groups and data centers.
    
    Args:
        inventory: Loaded inventory data
        efs_data: EFS server information
        
    Returns:
        Tuple containing group counts and data center pair information
    """
    # Initialize data structures
    group_counts: ControlGroups = {
        'controlgroup_a': {'dev': [], 'prod': []},
        'controlgroup_b': {'dev': [], 'prod': []}
    }
    data_center_pairs: Dict[str, dict] = {}
    assigned_servers = set()

    # Process inventory data
    controlgroup_a = set(inventory['all']['children']['controlgroup_a']['hosts'])
    controlgroup_b = set(inventory['all']['children']['controlgroup_b']['hosts'])

    for server, (cell, host_type) in efs_data.items():
        # Determine control group
        if server in controlgroup_a:
            group = 'controlgroup_a'
        elif server in controlgroup_b:
            group = 'controlgroup_b'
        else:
            continue

        # Update group counts
        group_counts[group][host_type].append((server, cell))
        assigned_servers.add(server)

        # Update data center pairs
        if cell not in data_center_pairs:
            data_center_pairs[cell] = {
                'controlgroup_a': {'dev': [], 'prod': []},
                'controlgroup_b': {'dev': [], 'prod': []}
            }
        data_center_pairs[cell][group][host_type].append(server)

    return group_counts, data_center_pairs

def check_ha_balance(data_center_pairs: Dict[str, dict]) -> List[str]:
    """Check high-availability balance across data centers.
    
    Args:
        data_center_pairs: Data center distribution data
        
    Returns:
        List of mismatch messages
    """
    mismatches = []
    
    for cell, groups in data_center_pairs.items():
        a_dev = len(groups['controlgroup_a']['dev'])
        a_prod = len(groups['controlgroup_a']['prod'])
        b_dev = len(groups['controlgroup_b']['dev'])
        b_prod = len(groups['controlgroup_b']['prod'])

        if a_dev != a_prod or b_dev != b_prod:
            mismatches.append(
                f"\nMismatch in {cell}: "
                f"Controlgroup A: {a_dev} dev vs {a_prod} prod, "
                f"Controlgroup B: {b_dev} dev vs {b_prod} prod"
            )
    
    return mismatches

def generate_comparison_report(efs_data: ServerCells,
                             inventory_data: InventoryData,
                             group_mismatches: Set[str],
                             ha_mismatches: List[str]):
    """Generate final validation report.
    
    Args:
        efs_data: EFS server data
        inventory_data: Inventory data
        group_mismatches: Server group mismatches
        ha_mismatches: High-availability mismatches
    """
    # Print header
    print("EFS Inventory Validation Report")
    print("=" * 50 + "\n")

    # Print group mismatches
    if group_mismatches:
        print("Server Group Mismatches:")
        print("-" * 50)
        print("\n".join(group_mismatches))
    else:
        print("All servers are in correct groups.\n")

    # Print HA mismatches
    if ha_mismatches:
        print("\nHigh Availability Mismatches:")
        print("-" * 50)
        print("\n".join(ha_mismatches))
    else:
        print("All control groups are properly balanced.\n")

    # Print server existence checks
    missing = set(efs_data.keys()) - set(inventory_data.keys())
    extra = set(inventory_data.keys()) - set(efs_data.keys())

    if missing:
        print("\nMissing Servers in Inventory:")
        print("-" * 50)
        print("\n".join(missing))

    if extra:
        print("\nExtra Servers in Inventory:")
        print("-" * 50)
        print("\n".join(extra))

def main():
    """Main execution flow."""
    # Load data sources
    inventory = load_inventory(INVENTORY_PATH)
    raw_efs_servers = get_efs_servers()
    
    # Process EFS data
    efs_servers = {s[0]: (s[1], s[2]) for s in raw_efs_servers if len(s) >= 3}
    
    # Validate server groups
    servertype_dev = set(inventory['all']['children']['servertype_dev']['hosts'])
    servertype_prod = set(inventory['all']['children']['servertype_prod']['hosts'])
    group_mismatches = validate_server_groups(raw_efs_servers, servertype_dev, servertype_prod)

    # Analyze control groups
    group_counts, data_center_pairs = analyze_control_groups(inventory, efs_servers)
    ha_mismatches = check_ha_balance(data_center_pairs)

    # Generate final report
    generate_comparison_report(
        efs_data=efs_servers,
        inventory_data=inventory,
        group_mismatches=group_mismatches,
        ha_mismatches=ha_mismatches
    )

if __name__ == "__main__":
    main()
